# Cline Rule: ขั้นตอนการทำงานและการสื่อสาร (Workflow and Communication)
# ไฟล์: workflow_and_communication.clinerule
# เวอร์ชัน: 1.0
# ผู้สร้าง: [ชื่อทีมพัฒนาของคุณ/Project Manager/Scrum Master]
# วันที่สร้าง: 2025-06-05
# คำอธิบาย: กฎนี้กำหนดแนวทางปฏิบัติสำหรับขั้นตอนการทำงาน (workflow), การสื่อสารภายในทีม,
# และวิธีที่ CLINE ควรสนับสนุนกระบวนการเหล่านี้ในโปรเจกต์ "[ชื่อโปรเจกต์ของคุณ]"
# เพื่อให้การทำงานร่วมกันเป็นไปอย่างราบรื่นและมีประสิทธิภาพ

## 1. การจัดการ Source Code และ Version Control (Git)

**คำสั่งถึง CLINE:**
เมื่อให้คำแนะนำหรือช่วยเหลือเกี่ยวกับการจัดการ source code ด้วย Git ให้ปฏิบัติตามแนวทางต่อไปนี้:

* **Branching Strategy:**
    * โปรเจกต์นี้ใช้ [ระบุ Branching Strategy เช่น "Gitflow (main, develop, feature/xxx, release/xxx, hotfix/xxx)" หรือ "GitHub Flow (main, feature/xxx)"].
    * เมื่อสร้าง feature ใหม่ หรือแก้ไข bug ให้แนะนำการสร้าง feature branch หรือ bugfix branch ใหม่จาก [ระบุ branch หลัก เช่น `develop` หรือ `main`].
    * *ตัวอย่าง Prompt:* "CLINE, ฉันกำลังจะเริ่มทำ User Story US-123 ควรสร้าง branch ใหม่ชื่ออะไรและแตกจาก branch ไหนตาม strategy ของเรา?"
* **Commit Messages:**
    * **รูปแบบ:** โปรเจกต์นี้ใช้รูปแบบ Commit Message แบบ [ระบุรูปแบบ เช่น "Conventional Commits (feat, fix, docs, style, refactor, test, chore)" หรือ "รูปแบบที่ทีมกำหนดเอง"].
        * *ตัวอย่าง Conventional Commits:* `feat: เพิ่มระบบตะกร้าสินค้าสำหรับผู้ใช้`
        * *ตัวอย่าง Prompt:* "CLINE, ช่วยร่าง commit message สำหรับการเปลี่ยนแปลงเหล่านี้หน่อย โดยเป็นการเพิ่มฟังก์ชันค้นหาสินค้า"
    * **ภาษา:** Commit messages ควรเขียนเป็น [ระบุภาษา เช่น "ภาษาอังกฤษ" หรือ "ภาษาไทย"] เพื่อความสม่ำเสมอ
    * **ความชัดเจน:** Commit message ควรสื่อถึงการเปลี่ยนแปลงที่ทำไปอย่างชัดเจนและกระชับ
* **Pull Requests (PRs) / Merge Requests (MRs):**
    * **PR Description:** เมื่อ CLINE ช่วยร่าง PR description (ถ้ามีความสามารถนี้ หรือช่วยสรุปการเปลี่ยนแปลง) ควรสรุปว่า PR นี้ทำอะไร, แก้ปัญหาอะไร, และมีการเปลี่ยนแปลงสำคัญอะไรบ้าง อาจอ้างอิงถึง Issue ID หรือ User Story ID ที่เกี่ยวข้อง
    * **Code Review Preparation:**
        * *ตัวอย่าง Prompt:* "CLINE, ช่วยสรุปการเปลี่ยนแปลงหลักๆ ใน branch feature/add-cart นี้ เพื่อเตรียมข้อมูลสำหรับ PR description และ code review หน่อย"
        * "CLINE, โค้ดส่วนนี้มีการเปลี่ยนแปลง logic ที่ซับซ้อน ช่วยเน้นจุดที่ผู้ review ควรให้ความสนใจเป็นพิเศษ"

**ตัวอย่างการใช้งานสำหรับ CLINE:**
"CLINE, ฉันแก้ไข bug ใน Issue #45 ควรตั้งชื่อ branch และเขียน commit message อย่างไรตามมาตรฐานของทีม?"
"CLINE, ช่วยสรุปการเปลี่ยนแปลงในไฟล์ `UserService.js` และ `UserController.js` เพื่อใส่ใน PR description"

## 2. การจัดการ Task และ Issue (Task and Issue Management)

**คำสั่งถึง CLINE:**
เมื่อให้คำแนะนำหรือช่วยเหลือเกี่ยวกับ task หรือ issue ที่กำลังทำอยู่ (หาก CLINE สามารถเชื่อมต่อหรือรับข้อมูลจากระบบ Task Management ได้ หรือผู้ใช้ให้ข้อมูล):

* **การอ้างอิง Task/Issue ID:**
    * แนะนำให้อ้างอิง Task ID หรือ Issue ID (เช่น จาก Jira, Trello, GitHub Issues) ใน commit messages, branch names, หรือ PR descriptions เพื่อให้สามารถติดตามงานได้ง่าย
    * *ตัวอย่าง Prompt:* "CLINE, ฉันกำลังทำงานกับ Task JIRA-123 เกี่ยวกับการปรับปรุงหน้า profile ผู้ใช้ มีส่วนไหนในโค้ดที่เกี่ยวข้องบ้าง?" (ผู้ใช้อาจต้องให้บริบทเพิ่มเติม)
* **การอัปเดตสถานะ (Conceptual):**
    * (หาก CLINE มีความสามารถในอนาคต) เมื่อ task หนึ่งเสร็จสิ้นและโค้ดถูก merge, CLINE อาจช่วยแนะนำการอัปเดตสถานะในระบบ Task Management
* **การแตก Task ย่อย:**
    * หากผู้ใช้กำลังวางแผนงานสำหรับฟีเจอร์ใหญ่ CLINE สามารถช่วยระดมสมองเพื่อแตกออกเป็น task ย่อยๆ ได้
    * *ตัวอย่าง Prompt:* "CLINE, ฟีเจอร์ 'ระบบแจ้งเตือนแบบ real-time' นี้ดูใหญ่มาก ช่วยแตกออกเป็น task ย่อยๆ ที่สามารถพัฒนาและทดสอบได้ง่ายขึ้นหน่อย"

**ตัวอย่างการใช้งานสำหรับ CLINE:**
"CLINE, ฉันกำลังจะ commit การแก้ไขสำหรับ Issue #78 ช่วยแนะนำ commit message ที่มี ID นี้ด้วย"
"CLINE, ช่วยสรุปขั้นตอนที่ต้องทำสำหรับ Task 'เพิ่มระบบ OTP สำหรับการยืนยันตัวตน' หน่อย"

## 3. การสื่อสารภายในทีม (Team Communication)

**คำสั่งถึง CLINE:**
แม้ CLINE จะไม่ใช่เครื่องมือสื่อสารโดยตรง แต่สามารถช่วยเตรียมข้อมูลสำหรับการสื่อสารในทีม:

* **การเตรียม Daily Stand-up Update:**
    * *ตัวอย่าง Prompt:* "CLINE, เมื่อวานฉันทำงานเกี่ยวกับ [อธิบายงาน] และวันนี้ฉันวางแผนจะทำ [อธิบายงาน] มีอุปสรรคคือ [อธิบายอุปสรรค] ช่วยสรุปเป็นข้อๆ สำหรับ daily stand-up update หน่อย"
* **การสรุปการตัดสินใจทางเทคนิค:**
    * หลังจากมีการหารือและตัดสินใจทางเทคนิค CLINE สามารถช่วยบันทึกสรุปการตัดสินใจนั้นลงใน `progress.md` หรือ `systemPatterns.md` ใน Memory Bank
    * *ตัวอย่าง Prompt:* "CLINE, วันนี้ทีมเราตัดสินใจเลือกใช้ PostgreSQL แทน MongoDB สำหรับโปรเจกต์นี้ด้วยเหตุผล [ระบุเหตุผล] ช่วยบันทึกการตัดสินใจนี้ลงใน `progress.md` หน่อย"
* **การเตรียมเอกสารสำหรับการประชุม:**
    * *ตัวอย่าง Prompt:* "CLINE, สัปดาห์หน้าจะมีการประชุมเรื่องการวางแผน Sprint ใหม่ ช่วยดึง User Stories ที่มีสถานะ 'Ready for Development' จาก `user_stories.md` มาสรุปให้หน่อย"

**ตัวอย่างการใช้งานสำหรับ CLINE:**
"CLINE, ช่วยสรุปประเด็นสำคัญจาก `activeContext.md` ที่ฉันควรจะแชร์ในทีม meeting วันนี้"
"CLINE, ร่างอีเมลสั้นๆ แจ้งทีมว่าฟีเจอร์ X ได้ถูก deploy ขึ้น staging environment แล้ว"

## 4. การ Code Review (สนับสนุนกระบวนการ)

**คำสั่งถึง CLINE:**
เมื่อผู้ใช้กำลังเตรียมโค้ดสำหรับ Code Review หรือกำลัง Review โค้ดของผู้อื่น CLINE สามารถช่วยได้ดังนี้:

* **การอธิบายโค้ดที่ซับซ้อน:**
    * ผู้เขียนโค้ดสามารถใช้ CLINE (`/explain`) เพื่อทำความเข้าใจโค้ดของตนเองอย่างละเอียดอีกครั้ง หรือเพื่อเตรียมคำอธิบายสำหรับผู้ review
    * ผู้ review สามารถใช้ CLINE เพื่อทำความเข้าใจส่วนที่ซับซ้อนใน PR
    * *ตัวอย่าง Prompt (สำหรับผู้ review):* "CLINE, ช่วยอธิบาย logic การทำงานของฟังก์ชัน `complexAlgorithm()` ใน PR นี้หน่อย"
* **การตรวจสอบเบื้องต้นตามมาตรฐาน:**
    * ก่อนส่ง PR ผู้เขียนโค้ดสามารถขอให้ CLINE ช่วยตรวจสอบว่าโค้ดที่เปลี่ยนแปลงสอดคล้องกับ `coding_standards.clinerule` หรือ `documentation_standards.clinerule` หรือไม่ (ในระดับหนึ่ง)
    * *ตัวอย่าง Prompt:* "CLINE, ช่วยตรวจสอบโค้ดที่ฉันเพิ่งเขียนในไฟล์นี้ว่ามีส่วนไหนไม่ตรงตาม naming conventions ของเราบ้างไหม?"
* **การแนะนำคำถามสำหรับ Reviewer:**
    * *ตัวอย่าง Prompt:* "CLINE, ฉันกำลังจะ review PR นี้ มีจุดไหนที่ฉันควรถามผู้เขียนโค้ดเป็นพิเศษเกี่ยวกับ performance หรือ security บ้างไหม?"

**ตัวอย่างการใช้งานสำหรับ CLINE:**
"CLINE, โค้ดส่วนนี้ใน PR มีการใช้ memory ค่อนข้างเยอะ มีแนวทางอื่นที่อาจจะดีกว่าไหม?"
"CLINE, ช่วยหา potential edge cases ที่ฟังก์ชันนี้อาจจะยังไม่ได้จัดการ สำหรับให้ผู้ review พิจารณา"

## 5. การ Onboarding สมาชิกใหม่ (สนับสนุนกระบวนการ)

**คำสั่งถึง CLINE:**
CLINE สามารถเป็นเครื่องมือช่วยในการ Onboarding สมาชิกใหม่ในทีมได้ โดย:

* **การให้ข้อมูลภาพรวมโปรเจกต์:** สมาชิกใหม่สามารถใช้ CLINE ถามคำถามเกี่ยวกับโปรเจกต์ โดย CLINE จะอ้างอิงข้อมูลจาก `project_overview.clinerule` และ Memory Bank
    * *ตัวอย่าง Prompt (สำหรับสมาชิกใหม่):* "CLINE, โปรเจกต์นี้ใช้ state management อะไรสำหรับ frontend? หาข้อมูลได้จากที่ไหน?"
* **การทำความเข้าใจโค้ดเบส:** สมาชิกใหม่สามารถใช้ `/explain` หรือถามคำถามเกี่ยวกับโค้ดส่วนต่างๆ เพื่อเร่งการเรียนรู้
* **การแนะนำแหล่งข้อมูล:** CLINE สามารถชี้ไปยังไฟล์ Memory Bank หรือ `.clinerule` ที่เกี่ยวข้องเมื่อสมาชิกใหม่มีคำถามเกี่ยวกับมาตรฐานหรือขั้นตอนการทำงาน

---

**คำแนะนำเพิ่มเติมสำหรับ CLINE:**
* ส่งเสริมการสื่อสารที่สร้างสรรค์และให้เกียรติกันภายในทีม
* เมื่อให้คำแนะนำเกี่ยวกับการทำงานร่วมกัน ให้เน้นความชัดเจนและความโปร่งใส
* หากกฎในไฟล์นี้ขัดแย้งกับกฎเฉพาะทางอื่นๆ (เช่น `coding_standards.clinerule`) ให้ยึดถือกฎที่เฉพาะเจาะจงกว่าสำหรับสถานการณ์นั้นๆ
* เตือนผู้ใช้ให้บันทึกการตัดสินใจที่สำคัญหรือการเปลี่ยนแปลงขั้นตอนการทำงานลงใน Memory Bank หรือเอกสารที่เกี่ยวข้อง