# Cline Rule: มาตรฐานการเขียนโค้ด (Coding Standards)
# ไฟล์: coding_standards.clinerule
# เวอร์ชัน: 1.1
# ผู้สร้าง: [ชื่อทีมพัฒนาของคุณ]
# วันที่อัปเดต: 2025-06-05
# คำอธิบาย: กฎนี้กำหนดมาตรฐานและแนวปฏิบัติที่ดีในการเขียนโค้ดสำหรับโปรเจกต์ [ชื่อโปรเจกต์ของคุณ]
# CLINE ควรพยายามปฏิบัติตามและส่งเสริมมาตรฐานเหล่านี้เมื่อช่วยสร้างหรือแก้ไขโค้ด

## 1. การตั้งชื่อ (Naming Conventions)

**คำสั่งถึง CLINE:**
เมื่อแนะนำหรือสร้างชื่อสำหรับตัวแปร, ฟังก์ชัน, คลาส, และไฟล์ ให้ปฏิบัติตามรูปแบบต่อไปนี้:

* **ตัวแปร (Variables) และ พารามิเตอร์ฟังก์ชัน (Function Parameters):**
    * ใช้ `camelCase` (เช่น `userName`, `totalAmount`, `isLoading`)
    * ชื่อควรสื่อความหมายอย่างชัดเจนถึงข้อมูลที่เก็บหรือวัตถุประสงค์
    * หลีกเลี่ยงการใช้ชื่อย่อที่ไม่เป็นที่รู้จักทั่วไป (เช่น `usr` แทน `user`)
* **ฟังก์ชัน (Functions):**
    * ใช้ `camelCase` (เช่น `calculateTotalPrice()`, `getUserProfile()`)
    * ชื่อควรเป็นคำกริยาหรือวลีที่ขึ้นต้นด้วยคำกริยา ซึ่งอธิบายการกระทำของฟังก์ชัน
* **คลาส (Classes) และ Interfaces (สำหรับ TypeScript):**
    * ใช้ `PascalCase` (หรือ `UpperCamelCase`) (เช่น `UserProfile`, `ProductService`, `LoggerInterface`)
    * ชื่อควรเป็นคำนามหรือวลีคำนามที่สื่อถึงสิ่งที่คลาสนั้นเป็นตัวแทน
* **ค่าคงที่ (Constants):**
    * ใช้ `UPPER_SNAKE_CASE` (เช่น `MAX_USERS`, `API_KEY`)
    * สำหรับค่าคงที่ที่ export ออกจากโมดูล
* **ชื่อไฟล์:**
    * ใช้ `kebab-case` สำหรับชื่อไฟล์ JavaScript/TypeScript (เช่น `user-profile.component.ts`, `api-utils.js`)
    * สำหรับ React components, อาจใช้ `PascalCase.tsx` (เช่น `UserProfile.tsx`) ตามความนิยมของทีม (โปรดระบุถ้ามี)

**ตัวอย่างการใช้งานสำหรับ CLINE:**
"CLINE, สร้างฟังก์ชันสำหรับดึงข้อมูลผู้ใช้ตาม ID และตั้งชื่อตามมาตรฐานที่กำหนด"
"CLINE, แนะนำชื่อตัวแปรที่เหมาะสมสำหรับเก็บจำนวนสินค้าคงเหลือ"

## 2. การจัดรูปแบบโค้ด (Code Formatting)

**คำสั่งถึง CLINE:**
พยายามจัดรูปแบบโค้ดให้สอดคล้องกับแนวทางต่อไปนี้ (หรือตามการตั้งค่าของ Prettier/ESLint ของโปรเจกต์ หากมีการใช้งาน):

* **การเยื้อง (Indentation):** ใช้ soft tabs โดยตั้งค่า tab width เป็น 2 spaces
* **วงเล็บปีกกา (Curly Braces):**
    * สำหรับ `if`, `else`, `for`, `while`, `do-while` ให้ใช้วงเล็บปีกกาเสมอ แม้ว่าจะมีเพียงบรรทัดเดียว
    * วงเล็บปีกกาเปิด (`{`) ควรอยู่บรรทัดเดียวกับ statement ที่เกี่ยวข้อง
* **ช่องว่าง (Spaces):**
    * ใช้ช่องว่างรอบ operators (เช่น `+`, `-`, `*`, `/`, `=`, `===`)
    * ใช้ช่องว่างหลัง comma (`,`) ในรายการ argument หรือ array/object literals
    * ไม่ควรมีช่องว่างภายในวงเล็บ `()` หรือ `[]`
* **ความยาวบรรทัด (Line Length):** พยายามให้ความยาวบรรทัดไม่เกิน 100-120 ตัวอักษร เพื่อให้อ่านง่าย
* **Semicolons:** ใช้ semicolons (`;`) ปิดท้ายทุก statement ใน JavaScript/TypeScript

**ตัวอย่างการใช้งานสำหรับ CLINE:**
"CLINE, ช่วยจัดรูปแบบโค้ดส่วนที่เลือกนี้ให้ตรงตามมาตรฐาน"
"CLINE, โค้ดส่วนนี้ยาวเกินไป ช่วยแนะนำวิธีแบ่งบรรทัดให้หน่อย"

## 3. การเขียน Comment (Commenting Style)

**คำสั่งถึง CLINE:**
เมื่อสร้างหรือแนะนำ comment ให้ใช้รูปแบบที่ชัดเจนและสื่อความหมาย:

* **Single-line comments:** ใช้ `//` สำหรับ comment สั้นๆ ในบรรทัดเดียว
* **Multi-line comments:** ใช้ `/* ... */` สำหรับ comment ที่ยาวหลายบรรทัด หรือสำหรับ block comment
* **JSDoc / TSDoc:**
    * สำหรับฟังก์ชัน, คลาส, และเมธอดสาธารณะ (public methods) ควรอธิบายด้วย JSDoc (สำหรับ JavaScript) หรือ TSDoc (สำหรับ TypeScript)
    * ระบุคำอธิบายของฟังก์ชัน, พารามิเตอร์ (`@param`), และค่าที่ trả về (`@returns`)
    * *ตัวอย่าง TSDoc:*
        ```typescript
        /**
         * คำนวณยอดรวมของสินค้าในตะกร้า
         * @param items - รายการสินค้าในตะกร้า, แต่ละ item ควรมี property 'price' และ 'quantity'
         * @returns ยอดรวมทั้งหมด
         */
        function calculateCartTotal(items: Array<{ price: number; quantity: number }>): number {
          // ... implementation
        }
        ```
* **TODO Comments:** ใช้ `// TODO: [คำอธิบายสิ่งที่ต้องทำ]` สำหรับงานที่ยังไม่เสร็จสิ้น หรือต้องการการปรับปรุงในอนาคต
* **Comment ที่ดีควร "อธิบายว่าทำไม" ไม่ใช่แค่ "อธิบายว่าทำอะไร":** โค้ดที่เขียนดีควรอธิบายตัวเองได้ว่า "ทำอะไร" ส่วน comment ควรเสริมในส่วนของ "เหตุผล" หรือ "ความซับซ้อน" ที่โค้ดอย่างเดียวอาจสื่อไม่ได้

**ตัวอย่างการใช้งานสำหรับ CLINE:**
"CLINE, ช่วยสร้าง TSDoc สำหรับฟังก์ชัน `getUserById` นี้หน่อย"
"CLINE, ส่วนนี้ของโค้ดดูซับซ้อน ช่วยแนะนำ comment ที่เหมาะสมเพื่ออธิบายตรรกะหน่อย"

## 4. การจัดการ Error (Error Handling)

**คำสั่งถึง CLINE:**
แนะนำและสร้างโค้ดที่จัดการ error อย่างเหมาะสม:

* ใช้ `try...catch...finally` blocks สำหรับ operations ที่อาจเกิด exception (เช่น การเรียก API, การทำงานกับไฟล์)
* Error messages ควรมีความหมายและให้ข้อมูลเพียงพอสำหรับการ debug
* หลีกเลี่ยงการ catch error แล้วไม่ทำอะไรต่อ (empty catch blocks) อย่างน้อยควรมีการ log error นั้น
* สำหรับ APIs, ควร trả về HTTP status codes ที่เหมาะสมตามลักษณะของ error

**ตัวอย่างการใช้งานสำหรับ CLINE:**
"CLINE, ฟังก์ชัน `fetchData` นี้ยังไม่ได้จัดการ error case ช่วยเพิ่ม `try-catch` block ให้หน่อย"

## 5. แนวปฏิบัติทั่วไป (General Best Practices)

**คำสั่งถึง CLINE:**

* **DRY (Don't Repeat Yourself):** แนะนำให้สร้างฟังก์ชันหรือ reusable components เพื่อหลีกเลี่ยงโค้ดที่ซ้ำซ้อน
* **Single Responsibility Principle (SRP):** ฟังก์ชันและคลาสควรมีความรับผิดชอบเดียวที่ชัดเจน
* **Readability:** โค้ดควรอ่านง่ายและเข้าใจง่าย
* **หลีกเลี่ยง Magic Numbers/Strings:** ใช้ค่าคงที่ (constants) ที่ตั้งชื่อสื่อความหมายแทนค่าที่ hardcode โดยตรง
* **การใช้ `async/await`:** สำหรับ asynchronous operations ให้แนะนำการใช้ `async/await` เพื่อให้โค้ดอ่านง่ายขึ้น (สำหรับ JavaScript/TypeScript)
* **การใช้ Strict Equality (`===` and `!==`):** แนะนำให้ใช้ strict equality operators เสมอใน JavaScript/TypeScript เพื่อหลีกเลี่ยง type coercion ที่ไม่คาดคิด

**ตัวอย่างการใช้งานสำหรับ CLINE:**
"CLINE, โค้ดส่วนนี้มีการทำงานที่คล้ายกันหลายจุด ช่วยแนะนำวิธี refactor โดยใช้หลักการ DRY หน่อย"
"CLINE, ฟังก์ชันนี้ดูเหมือนจะทำหลายอย่างเกินไป มีวิธีแยกความรับผิดชอบออกเป็นฟังก์ชันย่อยๆ ไหม?"

---

**คำแนะนำเพิ่มเติมสำหรับ CLINE:**
* หากไม่แน่ใจเกี่ยวกับมาตรฐานเฉพาะของโปรเจกต์ในบางกรณี ให้ถามนักพัฒนาเพื่อขอความชัดเจน
* เมื่อมีการเปลี่ยนแปลงมาตรฐานเหล่านี้ในไฟล์ `.clinerule` นี้ ให้พยายามปรับใช้การเปลี่ยนแปลงนั้นกับโค้ดใหม่ที่สร้างขึ้น
* หากพบโค้ดเดิมในโปรเจกต์ที่ไม่ตรงตามมาตรฐานเหล่านี้ และ CLINE ได้รับคำสั่งให้แก้ไขส่วนนั้น ให้แนะนำการปรับปรุงให้สอดคล้องกับมาตรฐานนี้ด้วย (ถ้าเหมาะสมและไม่กระทบ logic เดิมมากเกินไป)